<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0"><meta name="author" content="Snoopbobb"><link rel="icon" href="/blog/hexo.png"><title>Snoop Bobby Bloggs</title><meta name="description"><link rel="alternate" type="application/rss+xml" title="Snoop Bobby Bloggs" href="/blog/atom.xml"><link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"><link rel="stylesheet" href="/blog/css/bootstrap.min.css"><link rel="stylesheet" href="/blog/css/main.css"><link rel="stylesheet" href="/blog/css/highlight.css"><link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic"><link rel="stylesheet" href="//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800">
</head><body><nav class="navbar navbar-default navbar-fixed-top navbar-custom"><div class="container-fluid"><div class="navbar-header"><button type="button" data-toggle="collapse" data-target="#main-navbar" class="navbar-toggle"><span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="/blog/" class="navbar-brand">Snoop Bobby Bloggs</a></div><div id="main-navbar" class="collapse navbar-collapse"><ul class="nav navbar-nav navbar-right"><li><a href="/blog/archives">Archive</a></li><li><a href="https://snoopbobb.com">Portfolio</a></li></ul></div><div class="avatar-container"><div class="avatar-img-border"><a href="/blog/"><img src="/blog/hexo.png" class="avatar-img"></a></div></div></div></nav><header class="header-section"><div class="intro-header no-img"><div class="container"><div class="row"><div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1"><div class="post-heading"><h1>How to Use JavaScript Promises</h1><p class="post-meta">Posted on Mar 26 2017 · <a href="/blog/tags/JavaScript-·-Web-Developmet/" class="tag post-meta">JavaScript · Web Developmet</a></p></div></div></div></div></div></header><div class="container"><div class="row"><div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1"><article role="main" class="blog-post"><h2 id="The-Background"><a href="#The-Background" class="headerlink" title="The Background"></a>The Background</h2><p>So I had a little problem at work last week. We had built a new api call that would look up dates and times available for appointments that our clients can make. We have different locations each with different appointment times. The api call was created because our dates and times were input statically into our files, and with the growth of the site, it was beginning to be needed in other parts of our code, increasing un-maintainability and slowly becoming a mini-nightmare. It needed to be kept in one place in case any times are changed and to keep the appointment information consistent throughout the site.</p>
<h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>The problem was, that when I made the AJAX call to retrieve the data, by the time it returned it, the rest of my JavaScript was already on to the next steps. This is what makes asynchronous JavaScript so neat, but at the sametime, makes it a little more difficult to get it to do what you want. </p>
<h2 id="The-Hunt"><a href="#The-Hunt" class="headerlink" title="The Hunt"></a>The Hunt</h2><p>So to Google I went, to search for an easy solution. The thing was, most of the search results I saw for this problem, advised the developer to set their async to false. This stops the JavaScript from running, while the AJAX retrieves the data, returns it, and then the JavaScript would continue. It’s so simple…and it’s so wrong! With this solution you will get a warning in your dev tools’ console, that asynchronous set to false is deprecated. Doing this will cause your page to ‘hang’, the user can’t do anything on the page until the AJAX call is completed. How long will that take? Nobody knows, it could be a second or two and unnoticeable to the user, or it could be 30 seconds, and very noticeable. This is bad user-experience, and is highly frowned upon in today’s industry. If you are still doing this, I feel your pain. It is super simple, but it’s not the correct way to handle this in today’s JS world. So what do we do? Well, we can use a callback function which can get messy, but thanks to ES2015, we can now use a promise.</p>
<p>What is a promise? Well, Mozilla defines it like this:</p>
<blockquote>
<p>A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action’s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.<sup>1</sup></p>
<p><sup>1</sup> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p>
</blockquote>
<p>Now when I first read that to myself, I said, huh? So just for those like myself who might get ‘disrespected by the use of big words’, see Kevin Hart in <em>40 Year Old Virgin</em>, a promise is basically a holder that has no value when first initialized, but will have a value sometime later, if everything is successful. Now that we understand that, how do we use them?</p>
<h2 id="One-More-Problem"><a href="#One-More-Problem" class="headerlink" title="One More Problem"></a>One More Problem</h2><p>Promises are awesome, except they will not work in Internet Explorer, even IE11. Try not to act surprised. Thankfully, there is a very easy solution to get them to work in IE. You bring in <a href="http://bluebirdjs.com/docs/getting-started.html" target="_blank" rel="external">Blubird.js</a>. It’s a promise library and only needs to be brought in before you start using your promises.</p>
<pre><code>&lt;script src=&quot;//cdn.jsdelivr.net/bluebird/latest/bluebird.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;The rest of your JS that uses promises&lt;/script&gt;
</code></pre><h2 id="The-Confusion"><a href="#The-Confusion" class="headerlink" title="The Confusion"></a>The Confusion</h2><p>If you Google ‘how does a promise work?’, you’ll see a lot of this out there:</p>
<pre><code>let myFirstPromise = new Promise((resolve, reject) =&gt; {
    //We call resolve(...) when what we were doing async succeeded, and reject(...) when it failed.
    //In this example, we use setTimeout(...) to simulate async code. 
    //In reality, you will probably be using something like XHR or an HTML5 API.
    setTimeout(function(){
        resolve(&quot;Success!&quot;); //Yay! Everything went well!
    }, 250);
});

myFirstPromise.then((successMessage) =&gt; {
    //successMessage is whatever we passed in the resolve(...) function above.
    //It doesn&apos;t have to be a string, but if it is only a succeed message, it probably will be.
    console.log(&quot;Yay! &quot; + successMessage);
});

Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
</code></pre><p>They show you a lot of console.log saying success! Well, in my world I was trying to get some data, and set that data onto a webpage. I had a hard time finding any examples of that, so I will now attempt to show you one using vanilla JavaScript.</p>
<h2 id="The-Solution"><a href="#The-Solution" class="headerlink" title="The Solution"></a>The Solution</h2><p>Here is the JavaScript that sets up an AJAX call, makes the AJAX call, returns the promise object, and handles the data inside of the promise object. When you call the getStarWarsPeople function, you can add the ‘then’ method. This allows you to handle the promise after the AJAX call has been completed.</p>
<pre><code>// This is just a generic AJAX call that returns a Promise
function ajaxCall(url, methodType){
    var promiseObj = new Promise(function(resolve, reject){
        var xhr = new XMLHttpRequest();
        xhr.open(methodType, url);
        xhr.send();
        xhr.onreadystatechange = function(){
            if (xhr.readyState === 4){
                if (xhr.status === 200){
                    // console.log(&quot;xhr done successfully&quot;);
                    var resp = xhr.responseText;
                    var respJson = JSON.parse(resp);
                    resolve(respJson);
                } else {
                    reject(xhr.status);
                    // console.log(&quot;xhr failed&quot;);
                }
            } else {
                // console.log(&quot;xhr processing going on&quot;);
            }
        }
        // console.log(&quot;request sent succesfully&quot;);
    });
    return promiseObj;
}

// We are just setting up the url for the AJAX call
function getStarWarsPeople(){
    var url = &apos;http://swapi.co/api/people/?format=json&apos;;

    return ajaxCall(url, &apos;GET&apos;);
}

// This is handiling our data that is returned from the AJAX call, inside of the promise object is a results array that has the names of the people
function processStarWarsPeople(people) {
    var people = people.results;
    var max = people.length;
    for (var i=0; i&lt;max; i++){
        console.log(people[i].name);
    }
}

// this is how we put it all together, using the &apos;then&apos; method
getStarWarsPeople().then(processStarWarsPeople);
</code></pre><h2 id="Digging-a-Little-Deeper"><a href="#Digging-a-Little-Deeper" class="headerlink" title="Digging a Little Deeper"></a>Digging a Little Deeper</h2><p>Here is an HTML page using our functions that use the cool new promise feature. We have two buttons, one that makes an AJAX call, and one that can be clicked while the AJAX is working. If you set the async to false inside of the xhr.open properties, it will disable all of the JavaScript until the AJAX has been completed. If you would like to play around with this page, <a href="http://snoopbobb.com/star-wars">follow this link</a>.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;Get Star Wars People&lt;/title&gt;
        &lt;style&gt;
            button {
                cursor: pointer;
                font-size: 15px;
                padding: 10px;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id=&quot;content&quot;&gt;
            &lt;button id=&quot;get-people&quot;&gt;Get Star Wars People&lt;/button&gt;
            &lt;button id=&quot;while-ajax&quot;&gt;Click Me While AJAX Loads&lt;/button&gt;
        &lt;/div&gt;
    &lt;/body&gt;
    &lt;script&gt;
        // This is just a generic AJAX call that returns a Promise
        function ajaxCall(url, methodType){
            var promiseObj = new Promise(function(resolve, reject){
                var xhr = new XMLHttpRequest();
                xhr.open(methodType, url, true);
                xhr.send();
                xhr.onreadystatechange = function(){
                    if (xhr.readyState === 4){
                        if (xhr.status === 200){
                            // console.log(&quot;xhr done successfully&quot;);
                            var resp = xhr.responseText;
                            var respJson = JSON.parse(resp);
                            resolve(respJson);
                        } else {
                            reject(xhr.status);
                            // console.log(&quot;xhr failed&quot;);
                        }
                    } else {
                        // console.log(&quot;xhr processing going on&quot;);
                    }
                }
                // console.log(&quot;request sent succesfully&quot;);
            });
            return promiseObj;
        }

        // We are just setting up the url for the AJAX call
        function getStarWarsPeople(){
            var url = &apos;http://swapi.co/api/people/?format=json&apos;;

            return ajaxCall(url, &apos;GET&apos;);
        }

        // Process the data from the AJAX call and put the names in an unordered list
        function processStarWarsPeople(people) {
            var people = people.results;
            var max = people.length;
            var input = document.getElementById(&apos;content&apos;);

            for (var i=0; i&lt;max; i++){
                var ul = document.createElement(&apos;ul&apos;);
                var li = document.createElement(&apos;li&apos;);
                var a = document.createElement(&quot;a&quot;);

                a.href = people[i].url;
                a.text = people[i].name;    

                li.appendChild(a);
                ul.appendChild(li);
                input.appendChild(ul);
            }
        }

        function stuffWhileAjaxWorks(){
            var button = document.getElementById(&apos;while-ajax&apos;);
            var text = button.innerHTML;
            if (text == &apos;Click Me While AJAX Loads&apos;) {
                button.innerHTML =&apos;The Button Text Changed While Ajax Is Going!&apos;;
            } else {
                button.innerHTML = &apos;Click Me While AJAX Loads&apos;;
            }
        }

        var el = document.getElementById(&quot;get-people&quot;);
        el.onclick = function() {
            getStarWarsPeople().then(processStarWarsPeople);
        }

        var el = document.getElementById(&quot;while-ajax&quot;);
        el.onclick = function() {
            stuffWhileAjaxWorks();
        }
    &lt;/script&gt;
&lt;/html&gt;
</code></pre><h2 id="The-Conclusion"><a href="#The-Conclusion" class="headerlink" title="The Conclusion"></a>The Conclusion</h2><p>I really hope you learned something from this article. JavaScript promises are difficult to understand, at least for me. Remember, keep your JavaScript asynchronous, and let your users be happy! </p>
</article><ul class="pager blog-pager"><li class="next"><a href="/blog/Hello-World" data-toggle="tooltip" data-placement="top" title="Hello, World!">Next Post →</a></li></ul><div class="disqus-comments"><div class="comments"><div id="disqus_thread"></div></div></div><script>var url_parts = window.location.href.split("?");
var disqus_url = url_parts[0];
(function () {
    console.log("enter disqus");
    var dsq = document.createElement('script');
    dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = "//snoopbobb.disqus.com/embed.js";
    (document.head || d.body ).appendChild(dsq);
})();</script></div></div></div><footer><div class="container beautiful-jekyll-footer"><div class="row"><div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1"><ul class="list-inline text-center footer-links"><li><a href="https://github.com/snoopbobb" title="GitHub"><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-stack-1x fa-inverse fa-github"></i></span></a></li><li><a href="/atom.xml" title="RSS"><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-stack-1x fa-inverse fa-rss"></i></span></a></li><li><a href="https://twitter.com/snoopbobb4" title="Twitter"><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-stack-1x fa-inverse fa-twitter"></i></span></a></li><li><a href="mailto:snoopbobb4@gmail.com" title="Email me"><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-stack-1x fa-inverse fa-envelope"></i></span></a></li></ul><p class="copyright text-muted">© Snoopbobb • 2017 • <a href="mailto:undefined"></a>
</p><p class="theme-by text-muted">Stuff | Sports | Code</p></div></div></div></footer><script src="/blog/js/jquery-1.11.2.min.js"></script><script src="/blog/js/bootstrap.min.js"></script><script src="/blog/js/main.js"></script><script src="/blog/js/highlight.min.js"></script><script>hljs.initHighlightingOnLoad();</script><script>(function (i, s, o, g, r, a, m) {
    i['GoogleAnalyticsObject'] = r;
    i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date();
    a = s.createElement(o),
            m = s.getElementsByTagName(o)[0];
    a.async = 1;
    a.src = g;
    m.parentNode.insertBefore(a, m)
})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
ga('create', 'UA-46721230-12', 'auto');
ga('send', 'pageview');</script></body></html>